/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      KeyRatiosPerCompany: KeyRatiosPerCompanyObject
      Company: CompanyObject
      KeyRatiosPerCompanyConnection: KeyRatiosPerCompanyConnectionObject
      PageInfo: PageInfoObject
      KeyRatiosPerCompanyEdge: KeyRatiosPerCompanyEdgeObject
      AggregateKeyRatiosPerCompany: AggregateKeyRatiosPerCompanyObject
      CompanyConnection: CompanyConnectionObject
      CompanyEdge: CompanyEdgeObject
      AggregateCompany: AggregateCompanyObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      KeyRatiosPerCompanySubscriptionPayload: KeyRatiosPerCompanySubscriptionPayloadObject
      KeyRatiosPerCompanyPreviousValues: KeyRatiosPerCompanyPreviousValuesObject
      CompanySubscriptionPayload: CompanySubscriptionPayloadObject
      CompanyPreviousValues: CompanyPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      KeyRatiosPerCompany: KeyRatiosPerCompanyFieldDetails
      Company: CompanyFieldDetails
      KeyRatiosPerCompanyConnection: KeyRatiosPerCompanyConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      KeyRatiosPerCompanyEdge: KeyRatiosPerCompanyEdgeFieldDetails
      AggregateKeyRatiosPerCompany: AggregateKeyRatiosPerCompanyFieldDetails
      CompanyConnection: CompanyConnectionFieldDetails
      CompanyEdge: CompanyEdgeFieldDetails
      AggregateCompany: AggregateCompanyFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      KeyRatiosPerCompanySubscriptionPayload: KeyRatiosPerCompanySubscriptionPayloadFieldDetails
      KeyRatiosPerCompanyPreviousValues: KeyRatiosPerCompanyPreviousValuesFieldDetails
      CompanySubscriptionPayload: CompanySubscriptionPayloadFieldDetails
      CompanyPreviousValues: CompanyPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      KeyRatiosPerCompanyWhereUniqueInput: KeyRatiosPerCompanyWhereUniqueInputInputObject
      KeyRatiosPerCompanyWhereInput: KeyRatiosPerCompanyWhereInputInputObject
      CompanyWhereInput: CompanyWhereInputInputObject
      CompanyWhereUniqueInput: CompanyWhereUniqueInputInputObject
      KeyRatiosPerCompanyCreateInput: KeyRatiosPerCompanyCreateInputInputObject
      CompanyCreateOneWithoutKeyRatiosInput: CompanyCreateOneWithoutKeyRatiosInputInputObject
      CompanyCreateWithoutKeyRatiosInput: CompanyCreateWithoutKeyRatiosInputInputObject
      KeyRatiosPerCompanyUpdateInput: KeyRatiosPerCompanyUpdateInputInputObject
      CompanyUpdateOneWithoutKeyRatiosInput: CompanyUpdateOneWithoutKeyRatiosInputInputObject
      CompanyUpdateWithoutKeyRatiosDataInput: CompanyUpdateWithoutKeyRatiosDataInputInputObject
      CompanyUpsertWithoutKeyRatiosInput: CompanyUpsertWithoutKeyRatiosInputInputObject
      KeyRatiosPerCompanyUpdateManyMutationInput: KeyRatiosPerCompanyUpdateManyMutationInputInputObject
      CompanyCreateInput: CompanyCreateInputInputObject
      KeyRatiosPerCompanyCreateOneWithoutCompanyInput: KeyRatiosPerCompanyCreateOneWithoutCompanyInputInputObject
      KeyRatiosPerCompanyCreateWithoutCompanyInput: KeyRatiosPerCompanyCreateWithoutCompanyInputInputObject
      CompanyUpdateInput: CompanyUpdateInputInputObject
      KeyRatiosPerCompanyUpdateOneWithoutCompanyInput: KeyRatiosPerCompanyUpdateOneWithoutCompanyInputInputObject
      KeyRatiosPerCompanyUpdateWithoutCompanyDataInput: KeyRatiosPerCompanyUpdateWithoutCompanyDataInputInputObject
      KeyRatiosPerCompanyUpsertWithoutCompanyInput: KeyRatiosPerCompanyUpsertWithoutCompanyInputInputObject
      CompanyUpdateManyMutationInput: CompanyUpdateManyMutationInputInputObject
      KeyRatiosPerCompanySubscriptionWhereInput: KeyRatiosPerCompanySubscriptionWhereInputInputObject
      CompanySubscriptionWhereInput: CompanySubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    KeyRatiosPerCompanyOrderByInput: KeyRatiosPerCompanyOrderByInputValues,
    CompanyOrderByInput: CompanyOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'keyRatiosPerCompany', args?: QueryKeyRatiosPerCompanyArgs[] | false, alias?: string  } 
  | { name: 'keyRatiosPerCompanies', args?: QueryKeyRatiosPerCompaniesArgs[] | false, alias?: string  } 
  | { name: 'keyRatiosPerCompaniesConnection', args?: QueryKeyRatiosPerCompaniesConnectionArgs[] | false, alias?: string  } 
  | { name: 'company', args?: QueryCompanyArgs[] | false, alias?: string  } 
  | { name: 'companies', args?: QueryCompaniesArgs[] | false, alias?: string  } 
  | { name: 'companiesConnection', args?: QueryCompaniesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'keyRatiosPerCompany'
  | 'keyRatiosPerCompanies'
  | 'keyRatiosPerCompaniesConnection'
  | 'company'
  | 'companies'
  | 'companiesConnection'


type QueryKeyRatiosPerCompanyArgs =
  | 'where'
type QueryKeyRatiosPerCompaniesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryKeyRatiosPerCompaniesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompanyArgs =
  | 'where'
type QueryCompaniesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompaniesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  keyRatiosPerCompany: {
    type: 'KeyRatiosPerCompany'
    args: Record<QueryKeyRatiosPerCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: KeyRatiosPerCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany | null> | prisma.KeyRatiosPerCompany | null
  }
  keyRatiosPerCompanies: {
    type: 'KeyRatiosPerCompany'
    args: Record<QueryKeyRatiosPerCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: KeyRatiosPerCompanyWhereInput | null, orderBy?: prisma.KeyRatiosPerCompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany[]> | prisma.KeyRatiosPerCompany[]
  }
  keyRatiosPerCompaniesConnection: {
    type: 'KeyRatiosPerCompanyConnection'
    args: Record<QueryKeyRatiosPerCompaniesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: KeyRatiosPerCompanyWhereInput | null, orderBy?: prisma.KeyRatiosPerCompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompanyConnection> | prisma.KeyRatiosPerCompanyConnection
  }
  company: {
    type: 'Company'
    args: Record<QueryCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  companies: {
    type: 'Company'
    args: Record<QueryCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company[]> | prisma.Company[]
  }
  companiesConnection: {
    type: 'CompanyConnection'
    args: Record<QueryCompaniesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyConnection> | prisma.CompanyConnection
  }
}
  

// Types for KeyRatiosPerCompany

type KeyRatiosPerCompanyObject =
  | KeyRatiosPerCompanyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'earningsPerShare', args?: [] | false, alias?: string  } 
  | { name: 'dividends', args?: [] | false, alias?: string  } 
  | { name: 'bookValuePerShare', args?: [] | false, alias?: string  } 
  | { name: 'freeCashFlow', args?: [] | false, alias?: string  } 
  | { name: 'freeCashFlowPerShare', args?: [] | false, alias?: string  } 
  | { name: 'returnOnEquity', args?: [] | false, alias?: string  } 
  | { name: 'currentRatio', args?: [] | false, alias?: string  } 
  | { name: 'debtToEquity', args?: [] | false, alias?: string  } 

type KeyRatiosPerCompanyFields =
  | 'id'
  | 'company'
  | 'earningsPerShare'
  | 'dividends'
  | 'bookValuePerShare'
  | 'freeCashFlow'
  | 'freeCashFlowPerShare'
  | 'returnOnEquity'
  | 'currentRatio'
  | 'debtToEquity'



  

export interface KeyRatiosPerCompanyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompany">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  earningsPerShare: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dividends: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bookValuePerShare: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  freeCashFlow: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  freeCashFlowPerShare: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  returnOnEquity: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currentRatio: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  debtToEquity: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Company

type CompanyObject =
  | CompanyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'companyName', args?: [] | false, alias?: string  } 
  | { name: 'tickerSymbol', args?: [] | false, alias?: string  } 
  | { name: 'keyRatios', args?: [] | false, alias?: string  } 

type CompanyFields =
  | 'id'
  | 'companyName'
  | 'tickerSymbol'
  | 'keyRatios'



  

export interface CompanyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  companyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tickerSymbol: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  keyRatios: {
    type: 'KeyRatiosPerCompany'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany | null> | prisma.KeyRatiosPerCompany | null
  }
}
  

// Types for KeyRatiosPerCompanyConnection

type KeyRatiosPerCompanyConnectionObject =
  | KeyRatiosPerCompanyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type KeyRatiosPerCompanyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface KeyRatiosPerCompanyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'KeyRatiosPerCompanyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompanyEdge[]> | prisma.KeyRatiosPerCompanyEdge[]
  }
  aggregate: {
    type: 'AggregateKeyRatiosPerCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateKeyRatiosPerCompany> | prisma.AggregateKeyRatiosPerCompany
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for KeyRatiosPerCompanyEdge

type KeyRatiosPerCompanyEdgeObject =
  | KeyRatiosPerCompanyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type KeyRatiosPerCompanyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface KeyRatiosPerCompanyEdgeFieldDetails {
  node: {
    type: 'KeyRatiosPerCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompanyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany> | prisma.KeyRatiosPerCompany
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateKeyRatiosPerCompany

type AggregateKeyRatiosPerCompanyObject =
  | AggregateKeyRatiosPerCompanyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateKeyRatiosPerCompanyFields =
  | 'count'



  

export interface AggregateKeyRatiosPerCompanyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanyConnection

type CompanyConnectionObject =
  | CompanyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CompanyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CompanyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CompanyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyEdge[]> | prisma.CompanyEdge[]
  }
  aggregate: {
    type: 'AggregateCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCompany> | prisma.AggregateCompany
  }
}
  

// Types for CompanyEdge

type CompanyEdgeObject =
  | CompanyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CompanyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CompanyEdgeFieldDetails {
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCompany

type AggregateCompanyObject =
  | AggregateCompanyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCompanyFields =
  | 'count'



  

export interface AggregateCompanyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createKeyRatiosPerCompany', args?: MutationCreateKeyRatiosPerCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateKeyRatiosPerCompany', args?: MutationUpdateKeyRatiosPerCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateManyKeyRatiosPerCompanies', args?: MutationUpdateManyKeyRatiosPerCompaniesArgs[] | false, alias?: string  } 
  | { name: 'upsertKeyRatiosPerCompany', args?: MutationUpsertKeyRatiosPerCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteKeyRatiosPerCompany', args?: MutationDeleteKeyRatiosPerCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyKeyRatiosPerCompanies', args?: MutationDeleteManyKeyRatiosPerCompaniesArgs[] | false, alias?: string  } 
  | { name: 'createCompany', args?: MutationCreateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateCompany', args?: MutationUpdateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateManyCompanies', args?: MutationUpdateManyCompaniesArgs[] | false, alias?: string  } 
  | { name: 'upsertCompany', args?: MutationUpsertCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteCompany', args?: MutationDeleteCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCompanies', args?: MutationDeleteManyCompaniesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createKeyRatiosPerCompany'
  | 'updateKeyRatiosPerCompany'
  | 'updateManyKeyRatiosPerCompanies'
  | 'upsertKeyRatiosPerCompany'
  | 'deleteKeyRatiosPerCompany'
  | 'deleteManyKeyRatiosPerCompanies'
  | 'createCompany'
  | 'updateCompany'
  | 'updateManyCompanies'
  | 'upsertCompany'
  | 'deleteCompany'
  | 'deleteManyCompanies'


type MutationCreateKeyRatiosPerCompanyArgs =
  | 'data'
type MutationUpdateKeyRatiosPerCompanyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyKeyRatiosPerCompaniesArgs =
  | 'data'
  | 'where'
type MutationUpsertKeyRatiosPerCompanyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteKeyRatiosPerCompanyArgs =
  | 'where'
type MutationDeleteManyKeyRatiosPerCompaniesArgs =
  | 'where'
type MutationCreateCompanyArgs =
  | 'data'
type MutationUpdateCompanyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCompaniesArgs =
  | 'data'
  | 'where'
type MutationUpsertCompanyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCompanyArgs =
  | 'where'
type MutationDeleteManyCompaniesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createKeyRatiosPerCompany: {
    type: 'KeyRatiosPerCompany'
    args: Record<MutationCreateKeyRatiosPerCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: KeyRatiosPerCompanyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany> | prisma.KeyRatiosPerCompany
  }
  updateKeyRatiosPerCompany: {
    type: 'KeyRatiosPerCompany'
    args: Record<MutationUpdateKeyRatiosPerCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: KeyRatiosPerCompanyUpdateInput, where: KeyRatiosPerCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany | null> | prisma.KeyRatiosPerCompany | null
  }
  updateManyKeyRatiosPerCompanies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyKeyRatiosPerCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: KeyRatiosPerCompanyUpdateManyMutationInput, where?: KeyRatiosPerCompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertKeyRatiosPerCompany: {
    type: 'KeyRatiosPerCompany'
    args: Record<MutationUpsertKeyRatiosPerCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: KeyRatiosPerCompanyWhereUniqueInput, create: KeyRatiosPerCompanyCreateInput, update: KeyRatiosPerCompanyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany> | prisma.KeyRatiosPerCompany
  }
  deleteKeyRatiosPerCompany: {
    type: 'KeyRatiosPerCompany'
    args: Record<MutationDeleteKeyRatiosPerCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: KeyRatiosPerCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany | null> | prisma.KeyRatiosPerCompany | null
  }
  deleteManyKeyRatiosPerCompanies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyKeyRatiosPerCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: KeyRatiosPerCompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCompany: {
    type: 'Company'
    args: Record<MutationCreateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  updateCompany: {
    type: 'Company'
    args: Record<MutationUpdateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateInput, where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updateManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateManyMutationInput, where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCompany: {
    type: 'Company'
    args: Record<MutationUpsertCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput, create: CompanyCreateInput, update: CompanyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  deleteCompany: {
    type: 'Company'
    args: Record<MutationDeleteCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  deleteManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'keyRatiosPerCompany', args?: SubscriptionKeyRatiosPerCompanyArgs[] | false, alias?: string  } 
  | { name: 'company', args?: SubscriptionCompanyArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'keyRatiosPerCompany'
  | 'company'


type SubscriptionKeyRatiosPerCompanyArgs =
  | 'where'
type SubscriptionCompanyArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  keyRatiosPerCompany: {
    type: 'KeyRatiosPerCompanySubscriptionPayload'
    args: Record<SubscriptionKeyRatiosPerCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: KeyRatiosPerCompanySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompanySubscriptionPayload | null> | prisma.KeyRatiosPerCompanySubscriptionPayload | null
  }
  company: {
    type: 'CompanySubscriptionPayload'
    args: Record<SubscriptionCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CompanySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanySubscriptionPayload | null> | prisma.CompanySubscriptionPayload | null
  }
}
  

// Types for KeyRatiosPerCompanySubscriptionPayload

type KeyRatiosPerCompanySubscriptionPayloadObject =
  | KeyRatiosPerCompanySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type KeyRatiosPerCompanySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface KeyRatiosPerCompanySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'KeyRatiosPerCompany'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompany | null> | prisma.KeyRatiosPerCompany | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'KeyRatiosPerCompanyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"KeyRatiosPerCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.KeyRatiosPerCompanyPreviousValues | null> | prisma.KeyRatiosPerCompanyPreviousValues | null
  }
}
  

// Types for KeyRatiosPerCompanyPreviousValues

type KeyRatiosPerCompanyPreviousValuesObject =
  | KeyRatiosPerCompanyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'earningsPerShare', args?: [] | false, alias?: string  } 
  | { name: 'dividends', args?: [] | false, alias?: string  } 
  | { name: 'bookValuePerShare', args?: [] | false, alias?: string  } 
  | { name: 'freeCashFlow', args?: [] | false, alias?: string  } 
  | { name: 'freeCashFlowPerShare', args?: [] | false, alias?: string  } 
  | { name: 'returnOnEquity', args?: [] | false, alias?: string  } 
  | { name: 'currentRatio', args?: [] | false, alias?: string  } 
  | { name: 'debtToEquity', args?: [] | false, alias?: string  } 

type KeyRatiosPerCompanyPreviousValuesFields =
  | 'id'
  | 'earningsPerShare'
  | 'dividends'
  | 'bookValuePerShare'
  | 'freeCashFlow'
  | 'freeCashFlowPerShare'
  | 'returnOnEquity'
  | 'currentRatio'
  | 'debtToEquity'



  

export interface KeyRatiosPerCompanyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  earningsPerShare: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dividends: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bookValuePerShare: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  freeCashFlow: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  freeCashFlowPerShare: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  returnOnEquity: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currentRatio: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  debtToEquity: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CompanySubscriptionPayload

type CompanySubscriptionPayloadObject =
  | CompanySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CompanySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CompanySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CompanyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyPreviousValues | null> | prisma.CompanyPreviousValues | null
  }
}
  

// Types for CompanyPreviousValues

type CompanyPreviousValuesObject =
  | CompanyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'companyName', args?: [] | false, alias?: string  } 
  | { name: 'tickerSymbol', args?: [] | false, alias?: string  } 

type CompanyPreviousValuesFields =
  | 'id'
  | 'companyName'
  | 'tickerSymbol'



  

export interface CompanyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  companyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tickerSymbol: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface KeyRatiosPerCompanyWhereUniqueInput {
  id?: string | null
}
export type KeyRatiosPerCompanyWhereUniqueInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface KeyRatiosPerCompanyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  AND?: KeyRatiosPerCompanyWhereInput[]
}
export type KeyRatiosPerCompanyWhereInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CompanyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  companyName?: string | null
  companyName_not?: string | null
  companyName_in?: string[]
  companyName_not_in?: string[]
  companyName_lt?: string | null
  companyName_lte?: string | null
  companyName_gt?: string | null
  companyName_gte?: string | null
  companyName_contains?: string | null
  companyName_not_contains?: string | null
  companyName_starts_with?: string | null
  companyName_not_starts_with?: string | null
  companyName_ends_with?: string | null
  companyName_not_ends_with?: string | null
  tickerSymbol?: string | null
  tickerSymbol_not?: string | null
  tickerSymbol_in?: string[]
  tickerSymbol_not_in?: string[]
  tickerSymbol_lt?: string | null
  tickerSymbol_lte?: string | null
  tickerSymbol_gt?: string | null
  tickerSymbol_gte?: string | null
  tickerSymbol_contains?: string | null
  tickerSymbol_not_contains?: string | null
  tickerSymbol_starts_with?: string | null
  tickerSymbol_not_starts_with?: string | null
  tickerSymbol_ends_with?: string | null
  tickerSymbol_not_ends_with?: string | null
  keyRatios?: KeyRatiosPerCompanyWhereInput | null
  AND?: CompanyWhereInput[]
}
export type CompanyWhereInputInputObject =
  | Extract<keyof CompanyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'companyName_not', alias?: string  } 
  | { name: 'companyName_in', alias?: string  } 
  | { name: 'companyName_not_in', alias?: string  } 
  | { name: 'companyName_lt', alias?: string  } 
  | { name: 'companyName_lte', alias?: string  } 
  | { name: 'companyName_gt', alias?: string  } 
  | { name: 'companyName_gte', alias?: string  } 
  | { name: 'companyName_contains', alias?: string  } 
  | { name: 'companyName_not_contains', alias?: string  } 
  | { name: 'companyName_starts_with', alias?: string  } 
  | { name: 'companyName_not_starts_with', alias?: string  } 
  | { name: 'companyName_ends_with', alias?: string  } 
  | { name: 'companyName_not_ends_with', alias?: string  } 
  | { name: 'tickerSymbol', alias?: string  } 
  | { name: 'tickerSymbol_not', alias?: string  } 
  | { name: 'tickerSymbol_in', alias?: string  } 
  | { name: 'tickerSymbol_not_in', alias?: string  } 
  | { name: 'tickerSymbol_lt', alias?: string  } 
  | { name: 'tickerSymbol_lte', alias?: string  } 
  | { name: 'tickerSymbol_gt', alias?: string  } 
  | { name: 'tickerSymbol_gte', alias?: string  } 
  | { name: 'tickerSymbol_contains', alias?: string  } 
  | { name: 'tickerSymbol_not_contains', alias?: string  } 
  | { name: 'tickerSymbol_starts_with', alias?: string  } 
  | { name: 'tickerSymbol_not_starts_with', alias?: string  } 
  | { name: 'tickerSymbol_ends_with', alias?: string  } 
  | { name: 'tickerSymbol_not_ends_with', alias?: string  } 
  | { name: 'keyRatios', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CompanyWhereUniqueInput {
  id?: string | null
}
export type CompanyWhereUniqueInputInputObject =
  | Extract<keyof CompanyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface KeyRatiosPerCompanyCreateInput {
  id?: string | null
  company?: CompanyCreateOneWithoutKeyRatiosInput | null
  earningsPerShare?: undefined | null
  dividends?: undefined | null
  bookValuePerShare?: undefined | null
  freeCashFlow?: undefined | null
  freeCashFlowPerShare?: undefined | null
  returnOnEquity?: undefined | null
  currentRatio?: undefined | null
  debtToEquity?: undefined | null
}
export type KeyRatiosPerCompanyCreateInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'earningsPerShare', alias?: string  } 
  | { name: 'dividends', alias?: string  } 
  | { name: 'bookValuePerShare', alias?: string  } 
  | { name: 'freeCashFlow', alias?: string  } 
  | { name: 'freeCashFlowPerShare', alias?: string  } 
  | { name: 'returnOnEquity', alias?: string  } 
  | { name: 'currentRatio', alias?: string  } 
  | { name: 'debtToEquity', alias?: string  } 
  
export interface CompanyCreateOneWithoutKeyRatiosInput {
  create?: CompanyCreateWithoutKeyRatiosInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneWithoutKeyRatiosInputInputObject =
  | Extract<keyof CompanyCreateOneWithoutKeyRatiosInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyCreateWithoutKeyRatiosInput {
  id?: string | null
  companyName?: string | null
  tickerSymbol?: string | null
}
export type CompanyCreateWithoutKeyRatiosInputInputObject =
  | Extract<keyof CompanyCreateWithoutKeyRatiosInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'tickerSymbol', alias?: string  } 
  
export interface KeyRatiosPerCompanyUpdateInput {
  company?: CompanyUpdateOneWithoutKeyRatiosInput | null
  earningsPerShare?: undefined | null
  dividends?: undefined | null
  bookValuePerShare?: undefined | null
  freeCashFlow?: undefined | null
  freeCashFlowPerShare?: undefined | null
  returnOnEquity?: undefined | null
  currentRatio?: undefined | null
  debtToEquity?: undefined | null
}
export type KeyRatiosPerCompanyUpdateInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyUpdateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'earningsPerShare', alias?: string  } 
  | { name: 'dividends', alias?: string  } 
  | { name: 'bookValuePerShare', alias?: string  } 
  | { name: 'freeCashFlow', alias?: string  } 
  | { name: 'freeCashFlowPerShare', alias?: string  } 
  | { name: 'returnOnEquity', alias?: string  } 
  | { name: 'currentRatio', alias?: string  } 
  | { name: 'debtToEquity', alias?: string  } 
  
export interface CompanyUpdateOneWithoutKeyRatiosInput {
  create?: CompanyCreateWithoutKeyRatiosInput | null
  update?: CompanyUpdateWithoutKeyRatiosDataInput | null
  upsert?: CompanyUpsertWithoutKeyRatiosInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneWithoutKeyRatiosInputInputObject =
  | Extract<keyof CompanyUpdateOneWithoutKeyRatiosInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyUpdateWithoutKeyRatiosDataInput {
  companyName?: string | null
  tickerSymbol?: string | null
}
export type CompanyUpdateWithoutKeyRatiosDataInputInputObject =
  | Extract<keyof CompanyUpdateWithoutKeyRatiosDataInput, string>
  | { name: 'companyName', alias?: string  } 
  | { name: 'tickerSymbol', alias?: string  } 
  
export interface CompanyUpsertWithoutKeyRatiosInput {
  update?: CompanyUpdateWithoutKeyRatiosDataInput
  create?: CompanyCreateWithoutKeyRatiosInput
}
export type CompanyUpsertWithoutKeyRatiosInputInputObject =
  | Extract<keyof CompanyUpsertWithoutKeyRatiosInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface KeyRatiosPerCompanyUpdateManyMutationInput {
  earningsPerShare?: undefined | null
  dividends?: undefined | null
  bookValuePerShare?: undefined | null
  freeCashFlow?: undefined | null
  freeCashFlowPerShare?: undefined | null
  returnOnEquity?: undefined | null
  currentRatio?: undefined | null
  debtToEquity?: undefined | null
}
export type KeyRatiosPerCompanyUpdateManyMutationInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyUpdateManyMutationInput, string>
  | { name: 'earningsPerShare', alias?: string  } 
  | { name: 'dividends', alias?: string  } 
  | { name: 'bookValuePerShare', alias?: string  } 
  | { name: 'freeCashFlow', alias?: string  } 
  | { name: 'freeCashFlowPerShare', alias?: string  } 
  | { name: 'returnOnEquity', alias?: string  } 
  | { name: 'currentRatio', alias?: string  } 
  | { name: 'debtToEquity', alias?: string  } 
  
export interface CompanyCreateInput {
  id?: string | null
  companyName?: string | null
  tickerSymbol?: string | null
  keyRatios?: KeyRatiosPerCompanyCreateOneWithoutCompanyInput | null
}
export type CompanyCreateInputInputObject =
  | Extract<keyof CompanyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'tickerSymbol', alias?: string  } 
  | { name: 'keyRatios', alias?: string  } 
  
export interface KeyRatiosPerCompanyCreateOneWithoutCompanyInput {
  create?: KeyRatiosPerCompanyCreateWithoutCompanyInput | null
  connect?: KeyRatiosPerCompanyWhereUniqueInput | null
}
export type KeyRatiosPerCompanyCreateOneWithoutCompanyInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyCreateOneWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface KeyRatiosPerCompanyCreateWithoutCompanyInput {
  id?: string | null
  earningsPerShare?: undefined | null
  dividends?: undefined | null
  bookValuePerShare?: undefined | null
  freeCashFlow?: undefined | null
  freeCashFlowPerShare?: undefined | null
  returnOnEquity?: undefined | null
  currentRatio?: undefined | null
  debtToEquity?: undefined | null
}
export type KeyRatiosPerCompanyCreateWithoutCompanyInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyCreateWithoutCompanyInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'earningsPerShare', alias?: string  } 
  | { name: 'dividends', alias?: string  } 
  | { name: 'bookValuePerShare', alias?: string  } 
  | { name: 'freeCashFlow', alias?: string  } 
  | { name: 'freeCashFlowPerShare', alias?: string  } 
  | { name: 'returnOnEquity', alias?: string  } 
  | { name: 'currentRatio', alias?: string  } 
  | { name: 'debtToEquity', alias?: string  } 
  
export interface CompanyUpdateInput {
  companyName?: string | null
  tickerSymbol?: string | null
  keyRatios?: KeyRatiosPerCompanyUpdateOneWithoutCompanyInput | null
}
export type CompanyUpdateInputInputObject =
  | Extract<keyof CompanyUpdateInput, string>
  | { name: 'companyName', alias?: string  } 
  | { name: 'tickerSymbol', alias?: string  } 
  | { name: 'keyRatios', alias?: string  } 
  
export interface KeyRatiosPerCompanyUpdateOneWithoutCompanyInput {
  create?: KeyRatiosPerCompanyCreateWithoutCompanyInput | null
  update?: KeyRatiosPerCompanyUpdateWithoutCompanyDataInput | null
  upsert?: KeyRatiosPerCompanyUpsertWithoutCompanyInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: KeyRatiosPerCompanyWhereUniqueInput | null
}
export type KeyRatiosPerCompanyUpdateOneWithoutCompanyInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyUpdateOneWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface KeyRatiosPerCompanyUpdateWithoutCompanyDataInput {
  earningsPerShare?: undefined | null
  dividends?: undefined | null
  bookValuePerShare?: undefined | null
  freeCashFlow?: undefined | null
  freeCashFlowPerShare?: undefined | null
  returnOnEquity?: undefined | null
  currentRatio?: undefined | null
  debtToEquity?: undefined | null
}
export type KeyRatiosPerCompanyUpdateWithoutCompanyDataInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyUpdateWithoutCompanyDataInput, string>
  | { name: 'earningsPerShare', alias?: string  } 
  | { name: 'dividends', alias?: string  } 
  | { name: 'bookValuePerShare', alias?: string  } 
  | { name: 'freeCashFlow', alias?: string  } 
  | { name: 'freeCashFlowPerShare', alias?: string  } 
  | { name: 'returnOnEquity', alias?: string  } 
  | { name: 'currentRatio', alias?: string  } 
  | { name: 'debtToEquity', alias?: string  } 
  
export interface KeyRatiosPerCompanyUpsertWithoutCompanyInput {
  update?: KeyRatiosPerCompanyUpdateWithoutCompanyDataInput
  create?: KeyRatiosPerCompanyCreateWithoutCompanyInput
}
export type KeyRatiosPerCompanyUpsertWithoutCompanyInputInputObject =
  | Extract<keyof KeyRatiosPerCompanyUpsertWithoutCompanyInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CompanyUpdateManyMutationInput {
  companyName?: string | null
  tickerSymbol?: string | null
}
export type CompanyUpdateManyMutationInputInputObject =
  | Extract<keyof CompanyUpdateManyMutationInput, string>
  | { name: 'companyName', alias?: string  } 
  | { name: 'tickerSymbol', alias?: string  } 
  
export interface KeyRatiosPerCompanySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: KeyRatiosPerCompanyWhereInput | null
  AND?: KeyRatiosPerCompanySubscriptionWhereInput[]
}
export type KeyRatiosPerCompanySubscriptionWhereInputInputObject =
  | Extract<keyof KeyRatiosPerCompanySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CompanySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CompanyWhereInput | null
  AND?: CompanySubscriptionWhereInput[]
}
export type CompanySubscriptionWhereInputInputObject =
  | Extract<keyof CompanySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type KeyRatiosPerCompanyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'earningsPerShare_ASC'
  | 'earningsPerShare_DESC'
  | 'dividends_ASC'
  | 'dividends_DESC'
  | 'bookValuePerShare_ASC'
  | 'bookValuePerShare_DESC'
  | 'freeCashFlow_ASC'
  | 'freeCashFlow_DESC'
  | 'freeCashFlowPerShare_ASC'
  | 'freeCashFlowPerShare_DESC'
  | 'returnOnEquity_ASC'
  | 'returnOnEquity_DESC'
  | 'currentRatio_ASC'
  | 'currentRatio_DESC'
  | 'debtToEquity_ASC'
  | 'debtToEquity_DESC'
  
export type CompanyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'companyName_ASC'
  | 'companyName_DESC'
  | 'tickerSymbol_ASC'
  | 'tickerSymbol_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  