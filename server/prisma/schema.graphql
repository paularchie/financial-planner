### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateCompany {
  count: Int!
}

type AggregateKeyRatiosPerCompany {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Company {
  companyName: String
  id: ID!
  keyRatios: KeyRatiosPerCompany
  tickerSymbol: String
}

type CompanyConnection {
  aggregate: AggregateCompany!
  edges: [CompanyEdge!]!
  pageInfo: PageInfo!
}

input CompanyCreateInput {
  companyName: String
  id: ID
  keyRatios: KeyRatiosPerCompanyCreateOneWithoutCompanyInput
  tickerSymbol: String
}

input CompanyCreateOneWithoutKeyRatiosInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutKeyRatiosInput
}

input CompanyCreateWithoutKeyRatiosInput {
  companyName: String
  id: ID
  tickerSymbol: String
}

type CompanyEdge {
  cursor: String!
  node: Company!
}

enum CompanyOrderByInput {
  companyName_ASC
  companyName_DESC
  id_ASC
  id_DESC
  tickerSymbol_ASC
  tickerSymbol_DESC
}

input CompanyUpdateInput {
  companyName: String
  keyRatios: KeyRatiosPerCompanyUpdateOneWithoutCompanyInput
  tickerSymbol: String
}

input CompanyUpdateManyMutationInput {
  companyName: String
  tickerSymbol: String
}

input CompanyUpdateOneWithoutKeyRatiosInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutKeyRatiosInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutKeyRatiosDataInput
  upsert: CompanyUpsertWithoutKeyRatiosInput
}

input CompanyUpdateWithoutKeyRatiosDataInput {
  companyName: String
  tickerSymbol: String
}

input CompanyUpsertWithoutKeyRatiosInput {
  create: CompanyCreateWithoutKeyRatiosInput!
  update: CompanyUpdateWithoutKeyRatiosDataInput!
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  companyName: String
  companyName_contains: String
  companyName_ends_with: String
  companyName_gt: String
  companyName_gte: String
  companyName_in: [String!]
  companyName_lt: String
  companyName_lte: String
  companyName_not: String
  companyName_not_contains: String
  companyName_not_ends_with: String
  companyName_not_in: [String!]
  companyName_not_starts_with: String
  companyName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  keyRatios: KeyRatiosPerCompanyWhereInput
  tickerSymbol: String
  tickerSymbol_contains: String
  tickerSymbol_ends_with: String
  tickerSymbol_gt: String
  tickerSymbol_gte: String
  tickerSymbol_in: [String!]
  tickerSymbol_lt: String
  tickerSymbol_lte: String
  tickerSymbol_not: String
  tickerSymbol_not_contains: String
  tickerSymbol_not_ends_with: String
  tickerSymbol_not_in: [String!]
  tickerSymbol_not_starts_with: String
  tickerSymbol_starts_with: String
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar Json

type KeyRatiosPerCompany {
  bookValuePerShare: Json
  company: Company
  currentRatio: Json
  debtToEquity: Json
  dividends: Json
  earningsPerShare: Json
  freeCashFlow: Json
  freeCashFlowPerShare: Json
  id: ID!
  returnOnEquity: Json
}

type KeyRatiosPerCompanyConnection {
  aggregate: AggregateKeyRatiosPerCompany!
  edges: [KeyRatiosPerCompanyEdge!]!
  pageInfo: PageInfo!
}

input KeyRatiosPerCompanyCreateInput {
  bookValuePerShare: Json
  company: CompanyCreateOneWithoutKeyRatiosInput
  currentRatio: Json
  debtToEquity: Json
  dividends: Json
  earningsPerShare: Json
  freeCashFlow: Json
  freeCashFlowPerShare: Json
  id: ID
  returnOnEquity: Json
}

input KeyRatiosPerCompanyCreateOneWithoutCompanyInput {
  connect: KeyRatiosPerCompanyWhereUniqueInput
  create: KeyRatiosPerCompanyCreateWithoutCompanyInput
}

input KeyRatiosPerCompanyCreateWithoutCompanyInput {
  bookValuePerShare: Json
  currentRatio: Json
  debtToEquity: Json
  dividends: Json
  earningsPerShare: Json
  freeCashFlow: Json
  freeCashFlowPerShare: Json
  id: ID
  returnOnEquity: Json
}

type KeyRatiosPerCompanyEdge {
  cursor: String!
  node: KeyRatiosPerCompany!
}

enum KeyRatiosPerCompanyOrderByInput {
  bookValuePerShare_ASC
  bookValuePerShare_DESC
  currentRatio_ASC
  currentRatio_DESC
  debtToEquity_ASC
  debtToEquity_DESC
  dividends_ASC
  dividends_DESC
  earningsPerShare_ASC
  earningsPerShare_DESC
  freeCashFlow_ASC
  freeCashFlow_DESC
  freeCashFlowPerShare_ASC
  freeCashFlowPerShare_DESC
  id_ASC
  id_DESC
  returnOnEquity_ASC
  returnOnEquity_DESC
}

input KeyRatiosPerCompanyUpdateInput {
  bookValuePerShare: Json
  company: CompanyUpdateOneWithoutKeyRatiosInput
  currentRatio: Json
  debtToEquity: Json
  dividends: Json
  earningsPerShare: Json
  freeCashFlow: Json
  freeCashFlowPerShare: Json
  returnOnEquity: Json
}

input KeyRatiosPerCompanyUpdateManyMutationInput {
  bookValuePerShare: Json
  currentRatio: Json
  debtToEquity: Json
  dividends: Json
  earningsPerShare: Json
  freeCashFlow: Json
  freeCashFlowPerShare: Json
  returnOnEquity: Json
}

input KeyRatiosPerCompanyUpdateOneWithoutCompanyInput {
  connect: KeyRatiosPerCompanyWhereUniqueInput
  create: KeyRatiosPerCompanyCreateWithoutCompanyInput
  delete: Boolean
  disconnect: Boolean
  update: KeyRatiosPerCompanyUpdateWithoutCompanyDataInput
  upsert: KeyRatiosPerCompanyUpsertWithoutCompanyInput
}

input KeyRatiosPerCompanyUpdateWithoutCompanyDataInput {
  bookValuePerShare: Json
  currentRatio: Json
  debtToEquity: Json
  dividends: Json
  earningsPerShare: Json
  freeCashFlow: Json
  freeCashFlowPerShare: Json
  returnOnEquity: Json
}

input KeyRatiosPerCompanyUpsertWithoutCompanyInput {
  create: KeyRatiosPerCompanyCreateWithoutCompanyInput!
  update: KeyRatiosPerCompanyUpdateWithoutCompanyDataInput!
}

input KeyRatiosPerCompanyWhereInput {
  AND: [KeyRatiosPerCompanyWhereInput!]
  company: CompanyWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
}

input KeyRatiosPerCompanyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  createKeyRatiosPerCompany(data: KeyRatiosPerCompanyCreateInput!): KeyRatiosPerCompany!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteKeyRatiosPerCompany(where: KeyRatiosPerCompanyWhereUniqueInput!): KeyRatiosPerCompany
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyKeyRatiosPerCompanies(where: KeyRatiosPerCompanyWhereInput): BatchPayload!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateKeyRatiosPerCompany(data: KeyRatiosPerCompanyUpdateInput!, where: KeyRatiosPerCompanyWhereUniqueInput!): KeyRatiosPerCompany
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyKeyRatiosPerCompanies(data: KeyRatiosPerCompanyUpdateManyMutationInput!, where: KeyRatiosPerCompanyWhereInput): BatchPayload!
  upsertCompany(create: CompanyCreateInput!, update: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  upsertKeyRatiosPerCompany(create: KeyRatiosPerCompanyCreateInput!, update: KeyRatiosPerCompanyUpdateInput!, where: KeyRatiosPerCompanyWhereUniqueInput!): KeyRatiosPerCompany!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  companies(after: String, before: String, first: Int, last: Int, orderBy: CompanyOrderByInput, skip: Int, where: CompanyWhereInput): [Company!]!
  companiesConnection(after: String, before: String, first: Int, last: Int, orderBy: CompanyOrderByInput, skip: Int, where: CompanyWhereInput): CompanyConnection!
  company(where: CompanyWhereUniqueInput!): Company
  keyRatiosPerCompanies(after: String, before: String, first: Int, last: Int, orderBy: KeyRatiosPerCompanyOrderByInput, skip: Int, where: KeyRatiosPerCompanyWhereInput): [KeyRatiosPerCompany!]!
  keyRatiosPerCompaniesConnection(after: String, before: String, first: Int, last: Int, orderBy: KeyRatiosPerCompanyOrderByInput, skip: Int, where: KeyRatiosPerCompanyWhereInput): KeyRatiosPerCompanyConnection!
  keyRatiosPerCompany(where: KeyRatiosPerCompanyWhereUniqueInput!): KeyRatiosPerCompany
}
